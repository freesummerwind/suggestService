// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: suggestService.proto

#include "suggestService.pb.h"
#include "suggestService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace suggestService {

static const char* SuggestService_method_names[] = {
  "/suggestService.SuggestService/Query",
};

std::unique_ptr< SuggestService::Stub> SuggestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SuggestService::Stub> stub(new SuggestService::Stub(channel));
  return stub;
}

SuggestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Query_(SuggestService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SuggestService::Stub::Query(::grpc::ClientContext* context, const ::suggestService::SuggestRequest& request, ::suggestService::SuggestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

void SuggestService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::suggestService::SuggestRequest* request, ::suggestService::SuggestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void SuggestService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::suggestService::SuggestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void SuggestService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::suggestService::SuggestRequest* request, ::suggestService::SuggestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

void SuggestService::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::suggestService::SuggestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::suggestService::SuggestResponse>* SuggestService::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::suggestService::SuggestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::suggestService::SuggestResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::suggestService::SuggestResponse>* SuggestService::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::suggestService::SuggestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::suggestService::SuggestResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

SuggestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SuggestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SuggestService::Service, ::suggestService::SuggestRequest, ::suggestService::SuggestResponse>(
          [](SuggestService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::suggestService::SuggestRequest* req,
             ::suggestService::SuggestResponse* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
}

SuggestService::Service::~Service() {
}

::grpc::Status SuggestService::Service::Query(::grpc::ServerContext* context, const ::suggestService::SuggestRequest* request, ::suggestService::SuggestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace suggestService

